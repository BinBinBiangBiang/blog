generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Article {
  id         String    @id @unique
  userId     Int
  title      String    @db.Text
  content    String    @db.Text
  classify   String?   @db.Text
  coverImg   String?   @db.Text
  summary    String    @db.Text
  source     String?   @db.Text // 00 博客创建 01 掘金同步
  views      Int       @default(1)
  likes      Int       @default(0)
  favorites  Int       @default(0)
  showNumber Int       @default(1)
  status     String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  deletedAt  DateTime?
  isDeleted  Int?      @default(0)

  // 关联评论、点赞和收藏
  comments    Comment[]
  userLikes   UserLike[]
  userFavorites UserFavorite[]

  @@map("article")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  password      String?         @db.Text
  role          String?         @default("01")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  // 留言
  messages      Message[]
  
  // 文章互动
  comments      Comment[]
  likes         UserLike[]
  favorites     UserFavorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

// 文章评论
model Comment {
  id        String    @id @default(cuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Int       @default(0)
  
  // 评论的作者
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  
  // 评论所属的文章
  article   Article   @relation(fields: [articleId], references: [id])
  articleId String
  
  // 父评论ID，用于回复功能
  parentId  String?
  
  @@map("comment")
}

// 用户点赞文章的关联表
model UserLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // 点赞的用户
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  // 点赞的文章
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  
  // 一个用户只能给一篇文章点一次赞
  @@unique([userId, articleId])
  @@map("user_like")
}

// 用户收藏文章的关联表
model UserFavorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // 收藏的用户
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  
  // 收藏的文章
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  
  // 一个用户只能收藏一篇文章一次
  @@unique([userId, articleId])
  @@map("user_favorite")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticator")
}

// =============================== 留言板 ===============================
model Message {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // 删除时间

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@map("message")
}

// =============================== 订阅 ===============================
model Subscriber {
  id        String    @id @default(cuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // 删除时间

  @@map("subscriber")
}
